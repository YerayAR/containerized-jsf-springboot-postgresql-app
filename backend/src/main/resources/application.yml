# Configuración principal de la aplicación Spring Boot
spring:
  # Configuración de la fuente de datos (DataSource)
  datasource:
    # URL de conexión a la base de datos PostgreSQL.
    # "db" es el nombre del servicio de la base de datos en docker-compose.
    url: jdbc:postgresql://db:5432/productdb
    # Nombre de usuario para la conexión a la base de datos.
    username: appuser
    # Contraseña para la conexión a la base de datos.
    password: securepass

  # Configuración de JPA (Java Persistence API)
  jpa:
    # Especifica el dialecto de la base de datos para Hibernate, forzando su uso.
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    # Configuración específica de Hibernate
    hibernate:
      # ddl-auto: controla la generación del esquema de la base de datos.
      # "create-drop": crea el esquema al iniciar la aplicación y lo elimina al detenerla.
      # Ideal para desarrollo y pruebas, no para producción.
      ddl-auto: create-drop
      # Habilita características específicas de Hibernate
      naming:
        # Estrategia de nombramiento físico: no cambia los nombres de tablas/columnas definidos en las entidades.
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        # Estrategia de nombramiento implícito: utiliza una estrategia heredada para resolver nombres no especificados.
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl

    # Muestra las sentencias SQL generadas por Hibernate en la consola.
    show-sql: true

    # Propiedades adicionales de Hibernate
    properties:
      hibernate:
        # Dialecto de la base de datos (redundante con database-platform, pero es buena práctica mantenerlo).
        dialect: org.hibernate.dialect.PostgreSQLDialect
        # Formatea el SQL mostrado en la consola para que sea más legible.
        format_sql: true
        # Añade comentarios al SQL generado para entender mejor las consultas.
        use_sql_comments: true

        # Optimizaciones específicas de Hibernate
        jdbc:
          # Tamaño del lote para operaciones de escritura (ej. inserts, updates). Mejora el rendimiento.
          batch_size: 20
          # Número de filas que se recuperan de la base de datos de una sola vez. Mejora el rendimiento en lecturas.
          fetch_size: 50
        cache:
          # Deshabilita la caché de segundo nivel de Hibernate.
          use_second_level_cache: false
          # Deshabilita la caché de consultas de Hibernate.
          use_query_cache: false

# Configuración del servidor web embebido (Tomcat por defecto)
server:
  # Puerto en el que se ejecutará la aplicación.
  port: 8080

# Configuración de Swagger/OpenAPI para la documentación de la API
springdoc:
  # Configuración de la ruta para el documento OpenAPI JSON
  api-docs:
    path: /v3/api-docs
    enabled: true

  # Configuración de la interfaz de usuario de Swagger
  swagger-ui:
    path: /swagger-ui.html # URL para acceder a la UI de Swagger
    enabled: true
    operationsSorter: method # Ordena las operaciones por método HTTP (GET, POST, etc.)
    tagsSorter: alpha # Ordena las etiquetas (controladores) alfabéticamente
    tryItOutEnabled: true # Habilita el botón "Try it out" para probar los endpoints
    filter: true # Habilita la barra de filtro para buscar endpoints
    disable-swagger-default-url: false

  # No mostrar los endpoints de Actuator en la documentación de Swagger
  show-actuator: false
  # Paquetes a escanear para encontrar controladores y endpoints
  packages-to-scan: com.example.backend
  # Patrones de URL a incluir en la documentación
  paths-to-match: /api/**
  # Ordenar las claves en el JSON de OpenAPI para una salida consistente
  writer-with-order-by-keys: true
